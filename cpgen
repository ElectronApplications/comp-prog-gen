#!/bin/python

import os
import argparse
import datetime

TEMPLATES_DIRECTORY = os.path.dirname(__file__) + "/cp-templates/"
MODULE_START_MARKER = "@start@"
MODULE_END_MARKER = "@end@"
WATERMARK_MARKER = "@CPGEN_WATERMARK@"

# List the available templates
templates = os.listdir(TEMPLATES_DIRECTORY)

# Parse the arguments
parser = argparse.ArgumentParser(prog="cpgen", description="It generates code from templates ðŸ« ")

parser.add_argument("file_name", type=argparse.FileType("w"), help="The name of a file where code should be generated")
parser.add_argument("-t", "--template", choices=templates, required=False, help="Optionally provide the template you need. By default one with the matching file extension is chosen")
parser.add_argument("-f", "--flags", nargs="*", default=["t"], required=False, help="Flags used for enabling code modules")
parser.add_argument("--watermark", default=True, action="store_true")
parser.add_argument("--no-watermark", dest="watermark", action="store_false")
args = parser.parse_args()

# Load the template
if args.template is None:
    file_name = args.file_name.name
    _, extension = os.path.splitext(file_name)
    template_name = "template" + extension

    if template_name not in templates:
        print("Unfortunately there is no template with the file extension provided ðŸ˜¥")
        exit(-1)
else:
    template_name = args.template

with open(TEMPLATES_DIRECTORY + template_name) as input_file:
    working_template = input_file.readlines()

# Find all of the modules in the template
module_status = None
found_modules = []

index = 0
while index < len(working_template):
    line = working_template[index].strip()
    if line.startswith(MODULE_START_MARKER):
        module_name = line.replace(MODULE_START_MARKER, "")
        working_template.pop(index)
        if module_status is None:
            module_status = (module_name, index)
        else:
            print("An error has occured while parsing the template - nested modules are not allowed ðŸ¤“")
            exit(-1)
    elif line.startswith(MODULE_END_MARKER):
        module_name = line.replace(MODULE_END_MARKER, "")
        working_template.pop(index)
        if module_status is None:
            print("An error has occured while parsing the template - a module without a starting point has been found ðŸ¤¯")
            exit(-1)
        elif module_status[0] != module_name:
            print("An error has occured while parsing the template - nested modules are not allowed ðŸ¤“")
            exit(-1)
        else:
            found_modules.append((module_name, module_status[1], index))
            module_status = None
    else:
        index += 1

if module_status is not None:
    print("An error has occured while parsing the template - a module without an ending point has been found ðŸ¤¯")
    exit(-1)

# Go through the user provided flags
for provided_flag in args.flags:
    matching_flags = [x for x in found_modules if x[0] == provided_flag]
    found_modules = [x for x in found_modules if x[0] != provided_flag]

    if len(matching_flags) == 0:
        print(f"Module '{provided_flag}' was not found in the template ðŸ¤§")
        exit(-1)

# Remove all of the unused modules
for module in found_modules:
    for i in range(module[1], module[2]):
        working_template[i] = "\n"

# Remove occurences of more than one newline
index = 1
while index < len(working_template):
    if working_template[index - 1].strip() == "" and working_template[index].strip() == "":
        working_template.pop(index)
    else:
        index += 1

# Convert array of lines into one string
working_template = "".join(working_template)

# Optionally add a watermark
if args.watermark:
    info = f"{datetime.datetime.now(datetime.UTC).strftime("%Y-%m-%d %H:%M:%S")} UTC https://github.com/ElectronApplications/comp-prog-gen/ {template_name} {args.flags}"
    working_template = working_template.replace(WATERMARK_MARKER, info)
else:
    working_template = working_template.replace(WATERMARK_MARKER, "")

# Write the template into the file
with args.file_name as output_file:
    output_file.write(working_template)
    print("Code successfully generated ðŸ¤©")
